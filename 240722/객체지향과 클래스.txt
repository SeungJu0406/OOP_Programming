객체지향 프로그래밍


소스코드 순서에 따라 프로그램 동작과 로직이 결정되는 방법
	-> 절차지향 프로그래밍
소스가 복잡해질수록 순서가 꼬이기가 쉬우며, 사람의 머리로는 매우 복잡해짐

각각의 담당자(담당 클래스)를 만들고 서로 상호작용하는 방식
	-> 객체지향 프로그래밍

클래스
데이터와 관련 기능을 캡슐화할수있는 참조 형식
객체지향 프로그래밍 객체를 만들기 위한 설계도
만들어진 객체는 인스턴스라고함


객체지향의 4대 특징
1. 캡슐화
클래스 내에서 객체가 가지고있는 정보(데이터,필드)는 변수로 객체가 하는 기능(동작,메서드)은 함수로
하나의 클래스에 특정내용을 몰아넣어 관리하는 방법
접근 제한자(정보 은닉): private를 활용하여 특정변수나 함수가 해당 클래스에서만 사용 가능하게 할 수 있음
추천은  우선 프라이빗 이후에 외부에서 쓸 필요가 있을떄 public 으로 변경 - 그렇기때문에 기본 디폴드값이 프라이빗형태임


// 다른 메모에서 상세하게 설명
2.상속

// 다른 메모에서 상세하게 설명
3.추상화
객체의 특정부분, 필요부분만 표현


4.다형성
객체가 가진 속성이나 기능이 상황에 따라 여러가지 형태를 가지는 성질


SOLID 원칙
S: 단일 책임 원칙
	클래스는 하나의 책임만 가진다
	하나의 클래스는 하나의 기능을 담당하며 하나의 책임을 수행하는데 집중
O:개방 폐쇄 원칙
	확장에 열려있어야 하며, 수정에는 닫혀있어야 함.
	기능 추가시 기존의 코드를 수정하기 보단 새로운 추가적 코드를 작성
L:리스코프 치환 원칙
	자식객체는 언제나 부모타입으로 교체될 수 있어야 함
	부모의 메서드를 자식클래스가 사용해도 프로그램이 동작해야함
I:인터페이스 분리 원칙
	하나의 큰 인터페이스보다 용도에 맞는 인터페이스를 잘게 분리해야한다
D: 의존 역전 원칙
	고수준의 모듈은 저수준 모듈의 구현에 의존해선 안된다
	의존을 자식클래스에서 하면 안됨


SOLID를 지킬수록 클래스 구조가 가독성이 좋아지고 협업에 유리해짐



값타입과 참조타입

메모리의 구조
	1. 스택영역 : 함수내부에서 저장되는 지역변수와 매개변수
		후입선출 방식으로 저장 및 삭제
		상대적으로 작은크기와 빠른속도
	2. 힙 영역: 동적 메모리 저장
		GaBageCollector에 의해 메모리 삭제
		사용자에 의한 관리
	3. 데이터 영역: 전역변수, 정적 변수
	4. 코드영역 : 실행가능한 프로그램 코드 저장


값타입(value)과 참조타입(reference)

값타입: 메모리에 실제 값을 저장(복사)
	값이 전달될 떄 , 복사된 값을 전달
참조타입: 힙 메모리에 저장, 변수에는 데이터가 저장된 힙 메모리 주소 저장
	값이 전달될때 변수에 저장된 힙 메모리 주소 복사


구조체와 클래스의 차이
구조체에서도 변수와 함수가 들어갈수있음
하지만 구조체는 값타입이고 클래스는 참조타입이다