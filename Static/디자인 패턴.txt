디자인 패턴?
개발하면서 발생하는 반복적인 문제들을 어떻게 해결할 것인지에 대한 해결방안
실제 현업에서 프로그래밍으로 처리하면서 만들어진 다양한 해결책중 모범사례임.

이러한 디자인 패턴은 객체지향 4대특성과 설계원칙을 기반으로 구현됨
※ 4대특성: 캡슐화, 상속, 추상화, 다형성
  설계 원칙: SOLID

장점
재사용성: 
	반복적 문제에 대한 일반적 해결첵 제공, 유사한 상황에서 코드를 쉽게 작성
가동성: 
	일정한 구조로 정리하고 명확하게 작성, 개발자가 코드를 이해하고 유지보수 쉬움
유지보수성: 
	코드를 쉽게 모듈화, 변경이 필요한 경우 해당 모듈만 수정
확장성: 
	새로운 기능을 추가하거나 변경할 때 기존 코드를 변경하지 않고도 새로운 기능 통합
안정성과 신뢰성: 
	수많은 사람들이 인정한 모범사례로 검증된 솔류션 제공

비유하자면
4대원칙 : 요리도구
설계원칙: 도구의 사용법
디자인 패턴 : 레시피

디자인 패턴의 종류'

생성 패턴

1. 싱글톤 패턴: 
	하나의 클래스 인스턴스를 전역에서 접근 가능 해당 인스턴스가 한번만 생성되도록 보장하는 패턴
2. 팩토리 메서드 패턴:
	객체를 생성하기 위한 인터페이스 정의, 서브 클래스에서 어떤 클래스의 인스턴스를 생성할지 경정하는 패턴
3. 추상 팩토리 패턴: 
	관련된 객체들의 집합을 생성하는 인터페이스 제공, 구체적 팩토리 클래스를 통해 객체 생성을 추상화하는 패턴
4. 빌더 패턴:
	복잡한 객체 생성 과정을 단순화, 객체를 단계적으로 생성하며 구성하는 패턴
5.프로토타입 패턴:
	객체를 복제하여 새로운 객체를 생성하는 패턴, 기존 객체를 템플릿으로 사용하는 패턴


구조 패턴
1. 어댑터 패턴: 
	인터페이스 호환성을 제공하지 않는 클래스를 사용하기 위해 래퍼를 제공하는 패턴
2. 브릿지 패턴:
	추상화와 구현을 분리, 두가지를 독립적으로 확장할 수 있는 패턴
3. 컴포지트 패턴:
	개별 객체와 복합 객체를 동일하게 다루어, 트리구조의 객체를 구성하는 패턴
4. 데코레이터 패턴:
	객체에 동적 새로운 기능 추가, 객체를 확장할 수 있는 패턴
5. 퍼사드 패턴:
	서브 시스템을 더 쉽게 사용할 수 있도록 단순한 인터페이스 제공하는 패턴
6. 플라이웨이트 패턴:
	공유 가능한 객체를 통해 메모리 사용을 최적화하는 패턴
7. 프록시 패턴:
	다른 객체에 대한 대리자(Proxy)를 제공하여 접근 데어, 지연로딩등을 구현한 패턴