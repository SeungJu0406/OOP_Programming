싱글톤 패턴
	특정 클래스가 단 하나만의 인스턴스를 생성하여 사용하기 위한 패턴
	생성자를 여러번 호출하더라도 인스턴스가 하나만 존재하도록 보장, 동일한 객체 인스턴스에 접근할 수 있도록 함

싱글톤 패턴을 사용하는 이유
	인스턴스를 여러개 만들면 불필요한 자원을 사용, 프로그램이 예상치못한 결과를 낳을 수 있음.
	객체를 필요할때마다 생성하는 것이 아닌 단 한번만 생성하여 전역에서 이를 공유하고 사용할 수 있게 하기 위해 싱글톤 패턴 사용

장점
유일한 인스턴스:
	해당 인스턴스는 전역에서 단 하나만 존재하도록 보장, 객체의 일관된 상태 유지, 전역에서 접근하도록 함
메모리 절약: 
	인스턴스가 단 하나뿐이라 메모리 절약, 생성자를 여러번 호출하더라도 새로운 인스턴스를 생성하지 않아 메모리 점유 및 해제에 대한 오버헤드를 줄인다
지연 초기화:
	인스턴스가 실제로 사용되는 시점에 생성하여 초기 비용을 줄일 수 있음

단점
결합도 증가:
	전역에서 접근을 허용하기 때문에 ,해당 인스턴스에 의존하는 경우 결합도가 증가함
테스트 복잡성:
	싱글톤 클래스를 의존하는 클래스는 결합도 증가로 인해 테스트가 어려울 수 있음
상태 관리의 어려움:
	전역에서 사용되어 변경될 수가 있음, 이로인한 예상치 못한 동작 발생 가능
전역에서 접근가능:
	무분별한 사용을 막기 힘듦, 변경에 대한 복잡성이 증가함


기본 구현
두개 이상의 객체는 존재 할 수 없음
new 생성자에 제약을 걸어야하고 만들어진 단일 객체를 반환 할 수 있는 메서드 필요
	new 키워드를 사용할수 없도록 생성자에 프라이빗 접근 한정자를 지정
	유일한 단일 객체를 반환할 수 있는 정적메서드 필요
	유일한 단일객체를 참조할 정적 참조 변수 필요

